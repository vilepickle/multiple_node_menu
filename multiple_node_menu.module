<?php
/**
 * @file
 * Add multiple menu management capabilities to node form.
 */
use Drupal\Core\Form\FormStateInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\node\NodeInterface;

/**
 * Implements hook_module_implements_alter().
 *
 * Prevent Menu module from adding a menu link form to node forms.
 */
function multiple_node_menu_module_implements_alter(&$implementations, $hook) {
  // Only 'hook_node_delete' implementation is useful for us.
  if (in_array($hook, array('node_insert', 'node_update', 'node_prepare', 'form_node_form_alter', 'node_submit'))) {
    unset($implementations['menu']);
  }
}

/**
 * Implements hook_node_insert().
 */
function multiple_node_menu_node_insert(\Drupal\node\NodeInterface $node) {
  multiple_node_menu_save($node);
}

/**
 * Implements hook_node_update().
 */
function multiple_node_menu_node_update(\Drupal\node\NodeInterface $node) {
  multiple_node_menu_save($node);
}

/**
 * Helper function to save menu items. Used on hook_node_insert() and
 * hook_node_update().
 *
 * @param $node
 *   Node object to save menu links for.
 */
function multiple_node_menu_save(\Drupal\node\NodeInterface $node) {
  if (!empty($node->multiple_node_menu_links_deleted)) {
    foreach ($node->multiple_node_menu_links_deleted as $deleted_link) {
      menu_link_delete($deleted_link);
    }
  }

  if (empty($node->multiple_node_menu_links)) {
    return;
  }

  foreach ($node->multiple_node_menu_links as $delta => &$link) {
    if (!empty($link['link_title'])) {
      // Set path to node being saved.
      $link['link_path'] = "node/$node->nid";

      // If 'Enabled' checkbox was ticked. Set hidden to FALSE and vice-versa.
      if (isset($link['enabled'])) {
        $link['hidden'] = (int) !$link['enabled'];
      }

      if (!empty($link['description'])) {
        $link['options']['attributes']['title'] = $link['description'];
      }
      else {
        unset($link['options']['attributes']['title']);
      }

      // Add support for i18n_menu and other language aware modules. Set link
      // language to node language.
      $link['language'] = empty($node->language) ? \Drupal\Core\Language\Language::LANGCODE_NOT_SPECIFIED : $node->language;

      // Actually save the link.
      if (!menu_link_save($link)) {
        // @todo Not sure in what situations we should get here, but it doesn't
        // look quite right to display error mensages on a loop like this.
        drupal_set_message(t('There was an error saving the menu link.'), 'error');
      }
    }
  }
}

/**
 * Implements hook_node_prepare().
 */
function multiple_node_menu_node_prepare($node) {
  if (empty($node->multiple_node_menu_links) && !empty($node->nid)) {
    $node->multiple_node_menu_links = _multiple_node_menu_load($node);
  }

  if (empty($node->multiple_node_menu_links)) {
    $node->multiple_node_menu_links = array();
  }

  // Initialize array that holds deleted items.
  if (empty($node->multiple_node_menu_links_deleted)) {
    $node->multiple_node_menu_links_deleted = array();
  }
}


/**
 * Returns the definition for a menu link for the given node.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node entity.
 *
 * @return array
 *   An array that contains default values for the menu link form.
 */
function multiple_node_menu_get_menu_link_defaults(NodeInterface $node) {
  // Prepare the definition for the edit form.
  /** @var \Drupal\node\NodeTypeInterface $node_type */
  $node_type = $node->type->entity;
  $menu_name = strtok($node_type->getThirdPartySetting('menu_ui', 'parent', 'main:'), ':');
  $defaults = FALSE;
  if ($node->id()) {
    $id = FALSE;
    // Give priority to the default menu
    $type_menus = $node_type->getThirdPartySetting('menu_ui', 'available_menus', ['main']);
    if (in_array($menu_name, $type_menus)) {
      $query = \Drupal::entityQuery('menu_link_content')
        ->condition('link.uri', 'node/' . $node->id())
        ->condition('menu_name', $menu_name)
        ->sort('id', 'ASC')
        ->range(0, 1);
      $result = $query->execute();

      $id = (!empty($result)) ? reset($result) : FALSE;
    }
    // Check all allowed menus if a link does not exist in the default menu.
    if (!$id && !empty($type_menus)) {
      $query = \Drupal::entityQuery('menu_link_content')
        ->condition('link.uri', 'entity:node/' . $node->id())
        ->condition('menu_name', array_values($type_menus), 'IN')
        ->sort('id', 'ASC');
        // ->range(0, 1);
      $result = $query->execute();


      // $ids = (!empty($result)) ? reset($result) : FALSE;
      $ids = $result;
    }
    if ($ids) {
      foreach ($ids as $key => $id) {
        $menu_link = MenuLinkContent::load($id);
        $menu_link = \Drupal::service('entity.repository')->getTranslationFromContext($menu_link);
        // kint($menu_link);
        $defaults[] = [
          'entity_id' => $menu_link->id(),
          'id' => $menu_link->getPluginId(),
          'title' => $menu_link->getTitle(),
          'title_max_length' => $menu_link->getFieldDefinitions()['title']->getSetting('max_length'),
          'description' => $menu_link->getDescription(),
          'menu_name' => $menu_link->getMenuName(),
          'parent' => $menu_link->getParentId(),
          'weight' => $menu_link->getWeight(),
          'enabled' => $menu_link->enabled->value,
        ];
      } 
    }
  }

  if (!$defaults) {
    // Get the default max_length of a menu link title from the base field
    // definition.
    $field_definitions = \Drupal::entityManager()->getBaseFieldDefinitions('menu_link_content');
    $max_length = $field_definitions['title']->getSetting('max_length');
    $defaults[] = [
      'entity_id' => 0,
      'id' => '',
      'title' => '',
      'title_max_length' => $max_length,
      'description' => '',
      'menu_name' => $menu_name,
      'parent' => '',
      'weight' => 0,
    ];
  }
  return $defaults;
}


//function multiple_node_menu_form_alter(&$form, &$form_state, $form_id) {
//  kint($form_id);
//}
/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Add multiple menu items management capability to node form.
 */
function multiple_node_menu_form_node_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
//function multiple_node_menu_form_node_type_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
//  kint($form);
//  $node = $form['#node'];
  $node = $form_state->getFormObject()->getEntity();
  $node_type = $node->type->entity;
  $defaults = multiple_node_menu_get_menu_link_defaults($node);
//  kint($defaults);
  $menu_names = menu_ui_get_menus();
  $type_menus = $node_type->getThirdPartySetting('menu_ui', 'available_menus', ['main']);
  $available_menus = [];
  foreach ($type_menus as $menu) {
    $available_menus[$menu] = $menu_names[$menu];
  }
//  $type = $node->type;
  $bundle = $node->bundle();
//  print $type.$bundle;
//  kint($node->type);exit;
//  kint($node->bundle());exit;
//  kint($node);exit;

  $menu_parent_selector = \Drupal::service('menu.parent_form_selector');


  $form['menu']['menu_form_node'] = array(
    '#type' => 'details',
    '#title' => t('Menu Form Nodes'),
//      '#description' => $this->t('If no time option is provided then temporary deactivate form will not be shown to user.'),
    // Set up the wrapper so that AJAX will be able to replace the fieldset.
    '#prefix' => '<div id="multiple-node-menu-wrapper">',
    '#suffix' => '</div>',
    '#open' => TRUE,
//    '#states' => [
//      'invisible' => [
//        'input[name="menu[enabled]"]' => ['checked' => FALSE],
//      ],
//    ],
  );

//  $values = \Drupal::configFactory()->getEditable('multiple_node_menu.settings')->get('menu_options_' . $node->bundle());
  $values = \Drupal::state()->get('menu_options_' . $node->bundle());
//  kint($values);
//  $links_count = \Drupal::configFactory()->getEditable('multiple_node_menu.settings')->get('menu_options_' . $node->bundle() . 'links_count');
  $links_count = \Drupal::state()->get('menu_options_' . $node->bundle() . 'links_count');

  for ($i = 0; $i <= $links_count; $i++) {
//    kint($i);
//    kint($values[$i]['title']);
    // Populate the element with the link data.
//    kint($values[$i]);
//    if ($values[$i]['id']) {
//      $default = $defaults['menu_name'] . ':' . $defaults['parent'];
//    }
//    else {
//      $default = $node_type->getThirdPartySetting('menu_ui', 'parent', 'main:');
//    }




//    if ($values[$i]['id']) {
//      $default = $defaults['menu_name'] . ':' . $defaults['parent'];
//    }
//    else {
//      $default = $node_type->getThirdPartySetting('menu_ui', 'parent', 'main:');
//    }

//
//    if ($defaults['id']) {
//      $default = $defaults['menu_name'] . ':' . $defaults['parent'];
//    }
//    else {
//      $default = $node_type->getThirdPartySetting('menu_ui', 'parent', 'main:');
//    }

    if ($defaults[$i]) {
      $default = $defaults[$i]['menu_name'] . ':' . $defaults[$i]['parent'];
    }
    else {
      $default = $node_type->getThirdPartySetting('menu_ui', 'parent', 'main:');
    }
//    kint($default);



//    kint("default id");
//    kint($defaults['id']);
//    kint("default");
//    kint($default);
//    $parent_element = $menu_parent_selector->parentSelectElement($default, $defaults['id'], $available_menus);
//    $parent_element = $menu_parent_selector->parentSelectElement($values[$i]['menu_parent'], "menu_link_content:f040bfd4-6762-41bd-ba60-d5f7b4a4c25a", $available_menus);
//    kint($values[$i]['menu_parent']);
//    $parent_element = $menu_parent_selector->parentSelectElement($defaults[$i]['menu_parent'], $defaults[$i]['id'], $available_menus);
    $parent_element = $menu_parent_selector->parentSelectElement($default, $defaults[$i]['id'], $available_menus);

//    $parent_element = $menu_parent_selector->parentSelectElement('main:menu_link_content:5afffd5f-4828-4ca6-9674-ff58c7e9813c', "menu_link_content:f040bfd4-6762-41bd-ba60-d5f7b4a4c25a", $available_menus);

    kint($defaults[$i]);
    foreach (['id', 'entity_id'] as $key) {
      $form['menu']['menu_form_node'][$i][$key] = [
        '#type' => 'value',
        '#value' => $defaults[$i][$key]
      ];
    }

    $form['menu']['menu_form_node'][$i]['title'] = [
      '#type' => 'textfield',
      '#title' => t('Menu link title'),
      '#default_value' => $defaults[$i]['title'],
//    '#maxlength' => $defaults['title_max_length'],
    ];

    $form['menu']['menu_form_node'][$i]['description'] = [
      '#type' => 'textarea',
      '#title' => t('Description'),
      '#default_value' => $defaults[$i]['description'],
      '#rows' => 1,
      '#description' => t('Shown when hovering over the menu link.'),
    ];

    $form['menu']['menu_form_node'][$i]['menu_parent'] = $parent_element;
//    $form['menu']['menu_form_node'][$i]['menu_parent'] = $values[$i]['menu_parent'];
//    $form['menu']['link']['menu_parent'] = $parent_element;
//    $form['menu']['link']['menu_parent']['#title'] = t('Parent item');
//    $form['menu']['link']['menu_parent']['#attributes']['class'][] = 'menu-parent-select';

    $form['menu']['menu_form_node'][$i]['enabled'] = [
      '#type' => 'checkbox',
      '#title' => t('Enabled'),
      '#default_value' => (int) (bool) $defaults[$i]['enabled'],
    ];


    $form['menu']['menu_form_node'][$i]['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('multiple_node_menu_remove_link_submit'),
      // Restrict validation to appropriate fields only.
//    '#limit_validation_errors' => array(array('multiple_node_menu', 'add_link')),
      '#ajax' => array(
//      'callback' => '::multiple_node_menu_ajax_callback',
        'callback' => 'custom_multiple_node_menu_ajax_callback',
        'wrapper' => 'multiple-node-menu-wrapper',
      ),
    );

  }


//  $form['menu']['menu_form_node']['add_link']['#prefix'] = '<h3>' . t('Add new menu link') . '</h3>';
//  $form['menu']['menu_form_node']['add_link']['add_link_submit'] = array(
  $form['menu']['menu_form_node']['add_link_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add new menu link'),
    '#submit' => array('multiple_node_menu_add_link_submit'),
    // Restrict validation to appropriate fields only.
//    '#limit_validation_errors' => array(array('multiple_node_menu', 'add_link')),
    '#ajax' => array(
//      'callback' => '::multiple_node_menu_ajax_callback',
      'callback' => 'custom_multiple_node_menu_ajax_callback',
      'wrapper' => 'multiple-node-menu-wrapper',
    ),
  );







//  $form['menu']['menu_form_node']['link']['add_link']['#prefix'] = '<h3>' . t('Add new menu link') . '</h3>';
//  $form['menu']['menu_form_node']['link']['add_link']['add_link_submit'] = array(
//    '#type' => 'submit',
//    '#value' => t('Add new menu link'),
//    '#submit' => array('::multiple_node_menu_add_link_submit'),
//    // Restrict validation to appropriate fields only.
//    '#limit_validation_errors' => array(array('multiple_node_menu', 'add_link')),
//    '#ajax' => array(
//      'callback' => '::multiple_node_menu_ajax_callback',
//      'wrapper' => 'multiple-node-menu-wrapper',
//    ),
//  );


  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'multiple_node_menu_node_form_submit';
    }
  }



//  kint($values);
  foreach($values as $delta => $value) {

  }
  if(!$values) {
    $delta = 0;
  }

//  $form = array(
//    '#tree' => TRUE,
////    '#theme' => 'multiple_node_menu_current_links',
//  );


//  if( $node->getThirdPartySetting('menu_form_node', 'multiple_node_menu_links')) {
//    $multiple_node_menu_links = $node->getThirdPartySetting('menu_form_node', 'multiple_node_menu_links');
//
//    foreach ($multiple_node_menu_links as $delta => $link) {
  $delta = 0;
  $link = array();
//    $form[$delta] = multiple_node_menu_link_form($node, $link, TRUE);

//  $form['menu']['menu_form_node']['multiple_node_menu_links'][$delta] = $form['menu']['link'];




//  $form['menu']['menu_form_node']['enabled'] = [
//    '#type' => 'checkbox',
//    '#title' => t('Provide a menu link'),
////    '#default_value' => (int) (bool) $defaults['id'],
//  ];
//  $form['menu']['menu_form_node'] = [
//    '#type' => 'container',
//    '#parents' => ['menu'],
////    '#states' => [
////      'invisible' => [
////        'input[name="menu[enabled]"]' => ['checked' => FALSE],
////      ],
////    ],
//  ];








//  $form['menu']['menu_form_node']['multiple_node_menu_links'][$delta]['enabled'] = array(
//    '#type' => 'checkbox',
//    '#title' => t('Enabled'),
////        '#default_value' => !$link['hidden'],
//  );
//  $form['menu']['menu_form_node'][$delta]['remove'] = array(
//    '#type' => 'submit',
//    '#value' => t('Delete'),
//    '#name' => 'remove_' . $delta,
//    '#submit' => array('::multiple_node_menu_remove_link_submit'),
//    // Bypass validation for 'Delete' button.
//    '#limit_validation_errors' => array(),
//    '#ajax' => array(
//      'callback' => '::multiple_node_menu_ajax_callback',
//      'wrapper' => 'multiple-node-menu-wrapper',
//    ),
//  );
//    }
//  }




//  array_unshift($form['actions']['submit']['#submit'], 'menu_form_node_node_form_submit');
//  $form['actions']['submit']['#submit'][] = '::menu_form_node_node_form_submit';
//  kint($form['actions']);



  // Don't add the multiple node menu form when the content type has no
  // available menus assigned to it.
  // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// if (!variable_get('menu_options_' . $node->type, FALSE)) {
//     return;
//   }

//  \Drupal::configFactory()->getEditable('multiple_node_menu.settings')->get('menu_options_' . $node->type);


//  kint($form['menu']);

//
//  if (!empty($node->multiple_node_menu_links)) {
//    $form['menu']['link']['current_links'] = multiple_node_menu_current_links_form($node);
//    $form['menu']['link']['current_links']['#prefix'] = '<h3>' . t('Current menu links') . '</h3>';
//  }
//
//
//    $form['menu']['link']['multiple_node_menu_enabled'] = array(
//    '#type' => 'checkbox',
//    '#title' => t('Provide a menu link'),
////    '#default_value' => $enabled,
//  );
//
//
//  $total_options = 3;
//  for ($i = 0; $i <= $total_options; $i++) {
//
//
//    $form['link_title'] = array(
//      '#type' => 'textfield',
//      '#title' => t('Menu link title'),
//      '#default_value' => $link['link_title'],
//    );
//
//    $form['description'] = array(
//      '#type' => 'textarea',
//      '#title' => t('Description'),
//      '#default_value' => !empty($link['description']) ? $link['description'] : '',
//      '#rows' => 1,
//      '#description' => t('Shown when hovering over the menu link.'),
//    );
//
//    // @FIXME
//// // @FIXME
//// // The correct configuration object could not be determined. You'll need to
//// // rewrite this call manually.
//// $default = (!empty($link['mlid']) ? $link['menu_name'] . ':' . $link['plid'] : variable_get('menu_parent_' . $node->type, 'main-menu:0'));
//
//
//    // If the current parent menu item is not present in options, use the first
//    // available option as default value.
//    // @todo User should not be allowed to access menu link settings in such a
//    // case.
//    if (!isset($options[$default])) {
//      $array = array_keys($options);
//      $default = reset($array);
//    }
//    $form['parent'] = array(
//      '#type' => 'select',
//      '#title' => t('Parent item'),
//      '#default_value' => $default,
//      '#options' => $options,
//    );
//    $form['weight'] = array(
//      '#type' => 'weight',
//      '#title' => t('Weight'),
//      '#delta' => 50,
//      '#default_value' => $link['weight'],
//      '#description' => t('Menu links with smaller weights are displayed before links with larger weights.'),
//    );
//
//
//
//
//
//  }









//  $form['menu']['link']['add_link'] = multiple_node_menu_link_form($node);
//  $form['menu']['link']['add_link']['#prefix'] = '<h3>' . t('Add new menu link') . '</h3>';
//  $form['menu']['link']['add_link']['add_link_submit'] = array(
//    '#type' => 'submit',
//    '#value' => t('Add new menu link'),
//    '#submit' => array('::multiple_node_menu_add_link_submit'),
//    // Restrict validation to appropriate fields only.
//    '#limit_validation_errors' => array(array('multiple_node_menu', 'add_link')),
//    '#ajax' => array(
//      'callback' => '::multiple_node_menu_ajax_callback',
//      'wrapper' => 'multiple-node-menu-wrapper',
//    ),
//  );





//  $form['menu']['multiple_node_menu'] = array(
//    '#type' => 'details',
//    '#title' => t('Menu settings'),
//    '#access' => \Drupal::currentUser()->hasPermission('administer menu'),
//    '#open' => TRUE,
////    '#collapsed' => !empty($node->multiple_node_menu_links),
//    '#group' => 'additional_settings',
////    '#attached' => array(
////      'js' => array(drupal_get_path('module', 'menu') . '/menu.js'),
////    ),
//    '#tree' => TRUE,
//    '#weight' => -2,
//    '#attributes' => array('class' => array('menu-link-form')),
//  );
//
//
//  // @TODO
//  // Check if the Menu Admin per Menu module is installed on the site. If so,
//  // use its finer access settings.
//  if (\Drupal::moduleHandler()->moduleExists('menu_admin_per_menu')) {
//    $form['multiple_node_menu']['#access'] = _menu_admin_per_menu_access();
//  }




  // Check if there's at least one enabled link for setting the 'Provide a menu
  // link' checkbox enabled by default.
//  $enabled = FALSE;
//  foreach ($node->multiple_node_menu_links as $link) {
//    if (empty($link['hidden'])) {
//      $enabled = TRUE;
//      break;
//    }
//  }
//
//  $form['multiple_node_menu']['enabled'] = array(
//    '#type' => 'checkbox',
//    '#title' => t('Provide a menu link'),
//    '#default_value' => $enabled,
//  );
//  $form['multiple_node_menu']['link'] = array(
//    '#type' => 'container',
//    '#parents' => array('multiple_node_menu'),
//    '#states' => array(
//      'invisible' => array(
//        'input[name="multiple_node_menu[enabled]"]' => array('checked' => FALSE),
//      ),
//    ),
//    '#prefix' => '<div id="multiple-node-menu-wrapper">',
//    '#suffix' => '</div>',
//  );

//  if (!empty($node->multiple_node_menu_links)) {
//    $form['multiple_node_menu']['link']['current_links'] = multiple_node_menu_current_links_form($node);
//    $form['multiple_node_menu']['link']['current_links']['#prefix'] = '<h3>' . t('Current menu links') . '</h3>';
//  }
//
//  $form['multiple_node_menu']['link']['add_link'] = multiple_node_menu_link_form($node);
//  $form['multiple_node_menu']['link']['add_link']['#prefix'] = '<h3>' . t('Add new menu link') . '</h3>';
//  $form['multiple_node_menu']['link']['add_link']['add_link_submit'] = array(
//    '#type' => 'submit',
//    '#value' => t('Add new menu link'),
//    '#submit' => array('multiple_node_menu_add_link_submit'),
//    // Restrict validation to appropriate fields only.
//    '#limit_validation_errors' => array(array('multiple_node_menu', 'add_link')),
//    '#ajax' => array(
//      'callback' => 'multiple_node_menu_ajax_callback',
//      'wrapper' => 'multiple-node-menu-wrapper',
//    ),
//  );
}





/**
 * Form submission handler for menu item field on the node form.
 *
 * @see menu_ui_form_node_form_alter()
 */
function multiple_node_menu_node_form_submit($form, FormStateInterface $form_state) {
  $values1 = $form_state->getValue('menu');
//  kint("values 1");
//  kint($values1);
//  kint($values1['menu_form_node']);
//  kint($values1[0]['menu_form_node']);
  $values = $form_state->getValue('menu')['menu_form_node'];
  $node = $form_state->getFormObject()->getEntity();
//  kint($values);exit;


  \Drupal::state()->set('menu_options_' . $node->bundle(), $values);
  foreach($values as $value) {
//    kint($value);
//    if($value['enabled']) {
      $value['menu_name'] = "main";
//      $value['parent'] = trim($value['menu_parent'], "main:");
      $value['parent'] = str_replace('main:', '', $value['menu_parent']);
      _multiple_node_menu_node_save($node, $value);

//    }
  }
//  exit;
//  $x = \Drupal::state()->get('menu_options_' . $node->bundle());
//  kint($x);exit;
//
//
//
//  \Drupal::state()->get('menu_options_' . $node->bundle());
//  \Drupal::configFactory()->getEditable('multiple_node_menu.settings')->set('menu_options_' . $node->bundle(), $values);
//  $x = \Drupal::configFactory()->getEditable('multiple_node_menu.settings')->get('menu_options_' . $node->bundle());
//  kint($x);exit;

//  exit;
////  $values = $node->values;
////  print $values;
////  print $node->bundle();
////  // kint($node->bundle());
////  exit;
////  kint($node->type);exit;
////  kint($node);
////  $values = $form_state->getValues();
////  \Drupal::configFactory()->getEditable('multiple_node_menu.settings')->set('menu_options_' . $node->type, $values);
////  kint($values);exit;
//
////  \Drupal::configFactory()->getEditable('multiple_node_menu.settings')->get('menu_options_' . $node->type);
//
//  kint("node");
//  kint($node);exit;
//  if (!$form_state->isValueEmpty('menu')) {
//    $values = $form_state->getValue('menu');
//
//
//    if ($values['entity_id']) {
//      $entity = MenuLinkContent::load($values['entity_id']);
//      kint($entity);exit;
////      $entity->title->value = trim($values['title']);
////      $entity->description->value = trim($values['description']);
////      $entity->menu_name->value = $values['menu_name'];
////      $entity->parent->value = $values['parent'];
////      $entity->weight->value = isset($values['weight']) ? $values['weight'] : 0;
//      $entity->multiple_node_menu_link->value = array(0 =>"hello");
//      $entity->save();
//      kint($entity);exit;
//    }
//
//
//    if (empty($values['enabled'])) {
////      if ($values['entity_id']) {
////        $entity = MenuLinkContent::load($values['entity_id']);
////        $entity->delete();
////      }
//    }
////    elseif (trim($values['title'])) {
////      // Decompose the selected menu parent option into 'menu_name' and 'parent',
////      // if the form used the default parent selection widget.
////      if (!empty($values['menu_parent'])) {
////        list($menu_name, $parent) = explode(':', $values['menu_parent'], 2);
////        $values['menu_name'] = $menu_name;
////        $values['parent'] = $parent;
////      }
////      _menu_ui_node_save($node, $values);
////    }
////  }
//  }


}

/**
 * Helper function to create or update a menu link for a node.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Node entity.
 * @param array $values
 *   Values for the menu link.
 */
function _multiple_node_menu_node_save(NodeInterface $node, array $values) {
  /** @var \Drupal\menu_link_content\MenuLinkContentInterface $entity */
  if (!empty($values['entity_id'])) {
    $entity = MenuLinkContent::load($values['entity_id']);
    if ($entity->isTranslatable()) {
      if (!$entity->hasTranslation($node->language()->getId())) {
        $entity = $entity->addTranslation($node->language()->getId(), $entity->toArray());
      }
      else {
        $entity = $entity->getTranslation($node->language()->getId());
      }
    }
    // Update enabled value.
    $entity->enabled->value = $values['enabled'];
  }
  else {
    // Create a new menu_link_content entity.
    $entity = MenuLinkContent::create([
      'link' => ['uri' => 'entity:node/' . $node->id()],
      'langcode' => $node->language()->getId(),
    ]);
    $entity->enabled->value = 1;
  }
  $entity->title->value = trim($values['title']);
  $entity->description->value = trim($values['description']);
  $entity->menu_name->value = $values['menu_name'];
  $entity->parent->value = $values['parent'];
  $entity->weight->value = isset($values['weight']) ? $values['weight'] : 0;
  $entity->save();
}

/**
 * Generate a form for editing a menu links.
 */
function multiple_node_menu_current_links_form($node) {
  $form = array(
    '#tree' => TRUE,
    '#theme' => 'multiple_node_menu_current_links',
  );

  foreach ($node->multiple_node_menu_links as $delta => $link) {
    $form[$delta] = multiple_node_menu_link_form($node, $link, TRUE);
    $form[$delta]['enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enabled'),
      '#default_value' => !$link['hidden'],
    );
    $form[$delta]['remove'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#name' => 'remove_' . $delta,
      '#submit' => array('multiple_node_menu_remove_link_submit'),
      // Bypass validation for 'Delete' button.
      '#limit_validation_errors' => array(),
      '#ajax' => array(
        'callback' => 'multiple_node_menu_ajax_callback',
        'wrapper' => 'multiple-node-menu-wrapper',
      ),
    );
  }

  return $form;
}

/**
 * Generate a form for adding/editing a menu link.
 */
function multiple_node_menu_link_form($node, $link = array(), $edit = FALSE) {
  // Set default values.
  _multiple_node_menu_set_defaults($node, $link);

  // menu_parent_options() is goofy and can actually handle either a menu link
  // or a node type both as second argument. Pick based on whether there is
  // a link already.
  // @FIXME
// menu_parent_options() is gone in Drupal 8. To generate or work with menu trees, you'll need to
// use the menu.link_tree service.
// 
// 
// @see https://www.drupal.org/node/2226481
// @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Menu%21MenuLinkTree.php/class/MenuLinkTree/8
// $options = menu_parent_options(menu_get_menus(), $node->type);


  // If no possible parent menu items were found, there is nothing to display.
  if (empty($options)) {
    return;
  }

  $form = array();

  // Populate the element with the link data.
  foreach (array('mlid', 'module', 'hidden', 'has_children', 'customized', 'options', 'expanded', 'hidden', 'parent_depth_limit') as $key) {
    $form[$key] = array('#type' => 'value', '#value' => $link[$key]);
  }

  $form['link_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Menu link title'),
    '#default_value' => $link['link_title'],
  );

  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => !empty($link['description']) ? $link['description'] : '',
    '#rows' => 1,
    '#description' => t('Shown when hovering over the menu link.'),
  );

  // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $default = (!empty($link['mlid']) ? $link['menu_name'] . ':' . $link['plid'] : variable_get('menu_parent_' . $node->type, 'main-menu:0'));


  // If the current parent menu item is not present in options, use the first
  // available option as default value.
  // @todo User should not be allowed to access menu link settings in such a
  // case.
  if (!isset($options[$default])) {
    $array = array_keys($options);
    $default = reset($array);
  }
  $form['parent'] = array(
    '#type' => 'select',
    '#title' => t('Parent item'),
    '#default_value' => $default,
    '#options' => $options,
  );
  $form['weight'] = array(
    '#type' => 'weight',
    '#title' => t('Weight'),
    '#delta' => 50,
    '#default_value' => $link['weight'],
    '#description' => t('Menu links with smaller weights are displayed before links with larger weights.'),
  );

  return $form;
}

/**
 * Implements hook_node_submit().
 *
 * @see multiple_node_menu_form_node_form_alter()
 */
function multiple_node_menu_node_submit(\Drupal\node\NodeInterface $node, $form, \Drupal\Core\Form\FormStateInterface &$form_state) {
  // Include 'Add new menu link' form values if it was set.
  _multiple_node_menu_add_link($form_state);

  $values = $form_state->getValue(['multiple_node_menu']);
  if (!empty($values['current_links'])) {
    foreach ($values['current_links'] as $delta => $link) {
      if (!empty($link['parent'])) {
        // Decompose the selected menu parent option into 'menu_name' and 'plid',
        // if the form used the default parent selection widget.
        list($link['menu_name'], $link['plid']) = explode(':', $link['parent']);
      }

      // If 'Provide menu link' checkbox is unchecked. Mark all items disabled.
      if (empty($values['enabled'])) {
        $link['enabled'] = FALSE;
      }

      // Update all links to node object.
      $node->multiple_node_menu_links[$delta] = $link;
    }
  }
}

/**
 * Ajax callback for multiple menu link forms.
 */
//function multiple_node_menu_ajax_callback(array $form, FormStateInterface $form_state) {
function custom_multiple_node_menu_ajax_callback(array $form, FormStateInterface $form_state) {
//  drupal_set_message("multiple_node_menu_ajax_callback");
  // Clear fields for link specific values. The other fields will default to
  // previous entered values.
//  $form['multiple_node_menu']['link']['add_link']['link_title']['#value'] = '';
//  $form['multiple_node_menu']['link']['add_link']['description']['#value'] = '';
//
//  return $form['multiple_node_menu']['link'];

  return $form['menu']['menu_form_node'];
//  return $form['menu']['link']['add_link'];
}

/**
 * Implements hook_theme().
 */
function multiple_node_menu_theme() {
  return array(
    'multiple_node_menu_current_links' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Theme current menu links table.
 */
function theme_multiple_node_menu_current_links($variables) {
  $form = $variables['element'];

  $rows = array();
  foreach (\Drupal\Core\Render\Element::children($form) as $key) {
    // Unset field titles and descriptions.
    foreach (array('link_title', 'description', 'parent', 'weight') as $field_name) {
      unset(
        $form[$key][$field_name]['#title'],
        $form[$key][$field_name]['#description']
      );
    }

    $rows[] = array(
      \Drupal::service("renderer")->render($form[$key]['link_title']) . \Drupal::service("renderer")->render($form[$key]['description']),
      \Drupal::service("renderer")->render($form[$key]['parent']),
      \Drupal::service("renderer")->render($form[$key]['weight']),
      \Drupal::service("renderer")->render($form[$key]['enabled']),
      \Drupal::service("renderer")->render($form[$key]['remove']),
    );
  }

  $headers = array(
    t('Menu link title and description'),
    t('Parent'),
    t('Weight'),
    t('Enabled'),
    t('Operations'),
  );

  // @FIXME
// theme() has been renamed to _theme() and should NEVER be called directly.
// Calling _theme() directly can alter the expected output and potentially
// introduce security issues (see https://www.drupal.org/node/2195739). You
// should use renderable arrays instead.
// 
// 
// @see https://www.drupal.org/node/2195739
// return theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array('id' => 'multiple-node-menu-current-links')));

}

/**
 * Submit handler for 'Add menu link' button.
 */
function multiple_node_menu_add_link_submit(array $form, FormStateInterface $form_state) {
//  kint("form state");
//  kint($form_state);exit;
//  if (_multiple_node_menu_add_link($form_state)) {
//    // Cause the form to rebuild so the new items show up.
////    $form_state['rebuild'] = TRUE;
//  }

  $node = $form_state->getFormObject()->getEntity();
//  $links_count = \Drupal::state()->get('menu_options_custom_blog_links_count');
  $links_count = \Drupal::state()->get('menu_options_' . $node->bundle() . 'links_count');

  $links_count++;
  \Drupal::state()->set('menu_options_' . $node->bundle() . 'links_count', $links_count);
  drupal_set_message($links_count);
//  $time_options = $this->configFactory->get("total_options");
//  $time_options++;
//  $this->configFactory->set('total_options', $time_options);




  $form_state->setRebuild();
}

/**
 * Submit handler for "remove" button.
 */
function multiple_node_menu_remove_link_submit($form, &$form_state) {

  $node = $form_state->getFormObject()->getEntity();
//  $links_count = \Drupal::state()->get('menu_options_custom_blog_links_count');
  $links_count = \Drupal::state()->get('menu_options_' . $node->bundle() . 'links_count');

  $links_count--;
  \Drupal::state()->set('menu_options_' . $node->bundle() . 'links_count', $links_count);
  drupal_set_message($links_count);



//  $values = &$form_state['values'];
//  $node = &$form_state['node'];
//
//  $delta = key($values['multiple_node_menu']['current_links']);
//
//  $link = $node->multiple_node_menu_links[$delta];
//
//  // Set link to be deleted from database.
//  if (!empty($link['mlid'])) {
//    $node->multiple_node_menu_links_deleted[] = $link['mlid'];
//  }
//
//  // Unset the item so it get removed from the form.
//  unset($node->multiple_node_menu_links[$delta]);
//
//  // Cause the form to rebuild so the item is removed from the list.
//  $form_state['rebuild'] = TRUE;
}

/**
 * Determines whether a new menu item should be added based on a node_form form
 * state.
 *
 * @param $form_state
 *   Form state passed from Node form.
 * @return
 *   Whether or not a new menu item was added.
 */
function _multiple_node_menu_add_link(\Drupal\Core\Form\FormStateInterface $form_state) {
  $values = &$form_state->getValue(['multiple_node_menu', 'add_link']);

  if (!empty($values['link_title'])) {
    $node = &$form_state->get(['node']);

    // Decompose parent into 'menu_name' and 'plid'.
    if (!empty($values['parent'])) {
      list($values['menu_name'], $values['plid']) = explode(':', $values['parent']);
    }

    // Append new added link to node object.
    _multiple_node_menu_set_defaults($node, $values);
    $node->multiple_node_menu_links[] = $values;

    // Menu link was added.
    return TRUE;
  }

  // No menu link was added.
  return FALSE;
}

/**
 * Set default values to menu link array().
 */
function _multiple_node_menu_set_defaults($node, &$link) {
  // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $menu_name = strtok(variable_get('menu_parent_' . $node->type, 'main-menu:0'), ':');

  $link += array(
    'link_title' => '',
    'mlid' => 0,
    'plid' => 0,
    'menu_name' => $menu_name,
    'weight' => 0,
    'options' => array(),
    'module' => 'menu',
    'expanded' => 0,
    'hidden' => 0,
    'has_children' => 0,
    'customized' => 0,
  );

//  // Find the depth limit for the parent select.
//  if (!isset($link['parent_depth_limit'])) {
//    $link['parent_depth_limit'] = _menu_parent_depth_limit($link);
//  }
}

/**
 * Load all menu items associated with a node.
 *
 * @param $node
 *   The source path to look up.
 *
 * @return
 *   Array of paths or NULL if none found.
 */
function _multiple_node_menu_load($node) {
  // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $type_menus = variable_get('menu_options_' . $node->type, array('main-menu' => 'main-menu'));

  if (empty($type_menus)) {
    return NULL;
  }

  $links = db_select('menu_links')
    ->condition('module', 'menu')
    ->condition('router_path', 'node/%')
    ->condition('link_path', 'node/' . $node->nid)
    ->condition('menu_name', $type_menus, 'IN')
    ->fields('menu_links')
    ->execute()
    ->fetchAll(PDO::FETCH_ASSOC);

  foreach ($links as &$link) {
    // Unserialize options array.
    $link['options'] = unserialize($link['options']);

    // Set values used in the form.
    if (!empty($link['options']['attributes']['title'])) {
      $link['description'] = $link['options']['attributes']['title'];
    }
    $link['enabled'] = !$link['hidden'];
  }

  return $links;
}
